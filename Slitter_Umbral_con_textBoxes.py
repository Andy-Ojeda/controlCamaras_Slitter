
#! Aplicaci√≥n que crea Umbral seg√∫n selecci√≥n del Mouse.
#? En pantalla muestra la c√°mara y textBoxes para configurar la pieza (patr√≥n) a medir para crear un Umbral 
#?    con referencia a √©l. Por ejemplo, seg√∫n la pieza (patr√≥n) de 10mm crea un Umbral de 3mm.  
 
import cv2
import numpy as np
import tkinter as tk
from PIL import Image, ImageTk
import threading




class UmbralApp:

    def __init__(self, master):


        # Direcci√≥n IP de la c√°mara
        # rtsp_url = "rtsp://admin:Daynadayna1301@192.168.1.108:554/cam/realmonitor?channel=4&subtype=0"
        # self.ip = "http://192.168.43.172:4747/video"
        self.url = 1
        # self.ip = "192.168.13.12"
        # self.url = f"rtsp://admin:Royo12345@{self.ip}:80/cam/realmonitor?channel=1&subtype=0"
 
        self.titulo = "AndyO - Slitter, mesa de empalme"

        self.master = master
        
        # Estado inicial para la c√°mara
        self.cap = None
        self.reconnect_button = None

        self.points = []
        self.scale = 10.0               # 10mm (PATR√ìN DE MEDICI√ìN)
        self.spacing = 3.0              # 3mm (TAMA√ëO DEL UMBRAL)
        self.linea_de_inicio = 47.0     # 47mm (Distancia desde prensa a primer linea del umbral)
        

        self.desplazamiento_y = 0
        self.desplaz_x = 0
        self.anguloIzq = 0
        self.anguloDer = 0

        # Variables de zoom
        self.zoom_factor = 1.0
        self.zoom_step = 0.1  # Ajusta este valor para definir la cantidad de zoom por paso
        self.max_zoom = 3.0    # Zoom m√°ximo
        self.min_zoom = 0.0    # Zoom m√≠nimo

        self.msg = 'Seleccione en forma Vertical'
        self.angulo = 0
        
        self.frame_actual = None
        
        self.setup_ui()  # Configurar la interfaz gr√°fica
        # self.mostrar_pantalla_negra()

        self.connect_camera()
    
    
    def connect_camera(self):
        # Intentar abrir la c√°mara
        self.cap = cv2.VideoCapture(self.url)
        if not self.cap.isOpened():
            print("Error: No se pudo abrir la c√°mara.")
            self.mostrar_pantalla_negra()
        
        self.update_frame()  # Iniciar el ciclo de actualizaci√≥n del frame


    def setup_ui(self):
        """Configura la interfaz gr√°fica de la aplicaci√≥n."""
        self.master.title(self.titulo)

        # Cambiar el √≠cono de la ventana
        logo_path = "C:/Users/HP/Desktop/Probando Ando/Python/cosas_de_PYTHON/AndyO.ico" 
        icono = ImageTk.PhotoImage(file=logo_path)
        self.master.iconphoto(False, icono)


        #! Frame para los controles superiores
        control_frame = tk.Frame(self.master, bg="lightgray", height=30)
        control_frame.pack(side=tk.TOP, fill=tk.X)
        control_frame.pack_propagate(False)  # Evita que el frame ajuste autom√°ticamente su tama√±o

        #! Frame para el canvas
        camera_frame = tk.Frame(self.master, highlightthickness=2)
        camera_frame.pack(side=tk.BOTTOM, fill=tk.BOTH, expand=True)

        #! Frame para el Men√∫
        self.menu_frame = tk.Frame(self.master, highlightthickness=2, bg="orange")
        self.menu_frame.pack_propagate(False)  # Evitar que el frame se ajuste autom√°ticamente al contenido
        self.menu_frame.pack_forget()  # Ocultar el men√∫ al inicio

        self.menu_frame.configure(height=100) 


        self.titulo_menu = tk.Label(self.menu_frame, text="Configuraci√≥n:", font=("Arial", 16), anchor="center", bg="orange")
        self.titulo_menu.pack(pady=5)
        

       #! Boton de Men√∫
        self.menu_button = tk.Button(control_frame, text="‚ò∞", command=self.toggle_menu)
        self.menu_button.pack(anchor="ne", padx=3, pady=2)
        # self.menu_button.place_forget()

        

        # Crear un canvas para mostrar el feed de la webcam
        self.canvas_width = 640
        self.canvas_height = 480
        self.canvas = tk.Canvas(camera_frame, width=self.canvas_width, height=self.canvas_height, bg="black")
        self.canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)



        #!!!! Hilo para la captura de frames
        self.captura_thread = threading.Thread(target=self.capturar_frames, daemon=True)
        self.captura_thread.start()




        # Crear barra de desplazamiento vertical
        self.v_scrollbar = tk.Scrollbar(camera_frame, orient="vertical", command=self.canvas.yview)
        self.v_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        self.h_scrollbar = tk.Scrollbar(self.master, orient="horizontal", command=self.canvas.xview)
        self.h_scrollbar.pack(side=tk.BOTTOM, fill=tk.X)

        # Configurar el canvas para que use las barras de desplazamiento
        self.canvas.configure(yscrollcommand=self.v_scrollbar.set, xscrollcommand=self.h_scrollbar.set)

        # Ajustar la regi√≥n de desplazamiento del canvas
        self.canvas.config(scrollregion=(0, 0, self.canvas_width, self.canvas_height))

        # Actualizar tareas pendientes para calcular el tama√±o
        self.master.update_idletasks()

    

        # #!!!! Bot√≥n para imprimir tama√±os
        # self.button_get_sizes = tk.Button(control_frame, text="Obtener tama√±os", command=self.get_sizes)
        # self.button_get_sizes.pack()

        #!!!! Bot√≥n + de ZOOM
        self.button_zoom_in = tk.Button(control_frame, text="üîé+", command=self.zoom_in)
        self.button_zoom_in.pack()
        #!!!! Bot√≥n - de ZOOM
        self.button_zoom_out = tk.Button(control_frame, text="üîé-", command=self.zoom_out)
        self.button_zoom_out.pack()



        #! Botones para mover las l√≠neas hacia arriba y abajo
        self.boton_arriba = tk.Button(control_frame, text="üî∫", command=self.mover_arriba)
        self.boton_arriba.pack(side=tk.LEFT)
        self.boton_arriba['state'] = 'disabled'
        
        self.boton_abajo = tk.Button(control_frame, text="üîª", command=self.mover_abajo)
        self.boton_abajo.pack(side=tk.LEFT)
        self.boton_abajo['state'] = 'disabled'

        #! Botones para MOVER las l√≠neas a la izquierda y derecha
        self.boton_izquierda = tk.Button(control_frame, text=" ‚óÄ ", command=self.mover_Umbral_izquierda)
        self.boton_izquierda.pack(side=tk.LEFT)
        self.boton_izquierda['state'] = 'disabled'
        
        self.boton_derecha = tk.Button(control_frame, text=" ‚ñ∂ ", command=self.mover_Umbral_derecha)
        self.boton_derecha.pack(side=tk.LEFT)
        self.boton_derecha['state'] = 'disabled'

        #! Botones para ROTAR las l√≠neas a la izquierda y derecha
        self.boton_rotar_izquierda = tk.Button(control_frame, text=" ‚Ü™ ", command=self.rotar_Umbral_izquierda)
        self.boton_rotar_izquierda.pack(side=tk.LEFT)
        self.boton_rotar_izquierda['state'] = 'disabled'
        
        self.boton_rotar_derecha = tk.Button(control_frame, text=" ‚Ü© ", command=self.rotar_Umbral_derecha)
        self.boton_rotar_derecha.pack(side=tk.LEFT)
        self.boton_rotar_derecha['state'] = 'disabled'




        # Label y Textbox para scale (tama√±o del PATR√ìN)
        self.label_scale = tk.Label(self.menu_frame, text="Patr√≥n:", bg="lightgray")
        self.scale1 = tk.Entry(self.menu_frame, width=5)
        self.scale1.insert(0, str(self.scale))
        self.scale1.pack()
        
        # Label y Textbox para spacing (Distancia entre l√≠neas del centro - UMBRAL)
        self.label_spacing = tk.Label(self.menu_frame, text="Umbral:", bg="lightgray")
        self.spacing1 = tk.Entry(self.menu_frame, width=5)
        self.spacing1.insert(0, str(self.spacing))
        self.spacing1.pack()
        
        # Bot√≥n para actualizar valores
        self.button_update = tk.Button(self.menu_frame, text="OK", command=self.update_values)
        self.button_update.pack()

        # Label y Textbox para primera Linea (Distancia entre Prensa - UMBRAL)
        self.label_lineaUno = tk.Label(self.menu_frame, text="Linea de Inicio:", bg="lightgray")
        self.spacing_linea_de_inicio = tk.Entry(self.menu_frame, width=5)
        self.spacing_linea_de_inicio.insert(0, str(self.linea_de_inicio))
        self.spacing_linea_de_inicio.pack()






        #! Probando (Label Zoom_Factor)
        self.label_info_ZOOM = tk.Label(control_frame, text=f"x{self.zoom_factor}", bg="lightgray")
        self.label_info_ZOOM.pack()







        # Footer
        self.label_info_rotar = tk.Label(self.master, text="Rotar: (L) (R)", bg="lightgray", font=("Helvetica", 8, "bold"))
        self.label_info_rotar.pack()

        self.label_info_limpiar = tk.Label(self.master, text="Limpiar: (N)", bg="lightgray", font=("Helvetica", 8, "bold"))
        self.label_info_limpiar.pack()  # o place, seg√∫n tu dise√±o

        # self.label_info_zoomInOut = tk.Label(self.master, text="ZoomIN-OUT: (+)(-)", bg="lightgray", font=("Helvetica", 8, "bold"))
        # self.label_info_zoomInOut.pack()  # o place, seg√∫n tu dise√±o
        
        # self.label_coordenadas = tk.Label(self.master, text="X, Y: (0, 0)", bg="lightgray")
        # self.label_coordenadas.pack()  # o place seg√∫n tu dise√±o
        
        self.label_punto1 = tk.Label(self.master, text="P1: (0, 0)", bg="lightgray")
        self.label_punto1.pack()  # o place seg√∫n tu dise√±o
        
        self.label_punto2 = tk.Label(self.master, text="P2: (0, 0)", bg="lightgray")
        self.label_punto2.pack()  # o place seg√∫n tu dise√±o


        # Conectar eventos
        self.master.bind('n', self.borrar_puntos)
        self.master.bind('<Configure>', self.on_resize)  # Evento de redimensionamiento
        self.master.bind("<Button-1>", self.clics)  # Evento de clic en el canvas
        self.master.bind('l', self.rotar_izquierda)  # Evento para rotar a la izquierda
        self.master.bind('r', self.rotar_derecha)    # Evento para rotar a la derecha
        self.master.bind('+', self.zoom_in)          # Evento de zoom in
        self.master.bind('-', self.zoom_out)         # Evento de zoom out

        self.master.protocol("WM_DELETE_WINDOW", self.on_closing)
    


    #! Probando ----------------------------------
    def mostrar_pantalla_negra(self):
        # Rellenar el canvas con negro
        self.canvas.create_rectangle(0, 0, self.canvas_width, self.canvas_height, fill="black")
         # Agregar el texto "Sin Se√±al" en el medio de la pantalla
        self.canvas.create_text(self.canvas_width // 2, self.canvas_height // 2, text="Sin Se√±al", fill="red", font=("Helvetica", 24))
        if self.reconnect_button is None:
            self.reconnect_button = tk.Button(self.canvas, text="Reconectar", command=self.reconnect_camera)
            self.reconnect_button.place(x=self.canvas_width // 2 - 50, y=(self.canvas_height // 2) + 30)
        else:
            self.reconnect_button.place_forget()  # Aseg√∫rate de que el bot√≥n no est√© visible antes
    #!-----------------------------------------------

    def hide_reconnect_button(self):
        # Ocultar el bot√≥n de reconexi√≥n si est√° visible
        if self.reconnect_button is not None:
            self.reconnect_button.place_forget()
            self.reconnect_button = None


    def reconnect_camera(self):
        print("Reconectando c√°mara...1")  # Para depuraci√≥n
    
        # Intentar reconectar la c√°mara
        self.connect_camera()
        print("Reconectando c√°mara...2")  # Para depuraci√≥n
    
        # self.reconnect_button.pack_forget()
        self.hide_reconnect_button()
        print("Reconectando c√°mara...3")  # Para depuraci√≥n
    
        # self.reconnect_button = None









    def mover_arriba(self):
        # Ajusta el valor de desplazamiento
        self.desplazamiento_y -= 1
        # self.update_frame()

    def mover_abajo(self):
        # Ajusta el valor de desplazamiento
        self.desplazamiento_y += 1
        # self.update_frame()

    def mover_Umbral_izquierda(self):
        # Ajusta el √°ngulo de rotaci√≥n
        self.desplaz_x -= 5
        # self.update_frame()
        

    def mover_Umbral_derecha(self):
        # Ajusta el √°ngulo de rotaci√≥n
        self.desplaz_x += 5
        # self.update_frame()
        

    def rotar_Umbral_izquierda(self):
        # Ajusta el √°ngulo de rotaci√≥n
        self.anguloIzq += 1
        self.anguloDer -= 1
        # self.update_frame()
        

    def rotar_Umbral_derecha(self):
        # Ajusta el √°ngulo de rotaci√≥n
        self.anguloIzq -= 1
        self.anguloDer += 1
        # self.update_frame()
        



    def on_resize(self, event):
        """Ajusta la posici√≥n de los elementos al redimensionar la ventana."""
        self.posicionar_desde_borde_derecho()

    def borrar_puntos(self, event):
        """Borra los puntos seleccionados."""
        self.points = []  # Limpiar la lista de puntos
        self.label_punto1.config(text="P1: (0, 0)")  # Limpiar el label del punto 1
        self.label_punto2.config(text="P2: (0, 0)")  # Limpiar el label del punto 2
    
        
        self.boton_arriba['state'] = 'disabled'
        self.boton_abajo['state'] = 'disabled'
        self.boton_izquierda['state'] = 'disabled'
        self.boton_derecha['state'] = 'disabled'
        self.boton_rotar_izquierda['state'] = 'disabled'
        self.boton_rotar_derecha['state'] = 'disabled'
            
        print("Puntos borrados")

    def posicionar_desde_borde_derecho(self):
        """Posiciona los elementos de la interfaz desde el borde derecho del canvas."""
        self.master.update_idletasks()  # Asegurar que las dimensiones se actualicen
        
        canvas_width = self.master.winfo_width()  # Obtener el ancho del root
        canvas_height = self.master.winfo_height()  # Obtener el alto del root
        
        # label_info_zoomInOut_width = self.label_info_zoomInOut.winfo_width()
        # label_info_zoomOUT_width = self.label_info_zoomOUT.winfo_width()
        label_info_rotar_width = self.label_info_rotar.winfo_width()
        info_limpiar_width = self.label_info_limpiar.winfo_width()  # Obtener el alto del root
        # label_coordenadas_width = self.label_coordenadas.winfo_width()
        label_punto1_width = self.label_punto1.winfo_width()

        



        #? PROBANDO BOT√ìN ZOOM
        button_zoom_in_height = self.button_zoom_in.winfo_height()    # Ancho de bot√≥n zoom_in
        button_zoom_out_height = self.button_zoom_out.winfo_height()    # Ancho de bot√≥n zoom_in




        self.label_scale.place(x=5, y=50)
        self.scale1.place(x=51, y=51)
        
        self.label_spacing.place(x=94, y=50)
        self.spacing1.place(x=143, y=51)

        self.label_lineaUno.place(x=186 , y=50)
        self.spacing_linea_de_inicio.place(x=273 , y=51)
        
        self.button_update.place(x=325, y=48)





        self.label_info_ZOOM.place(x=320, y=4)

        #? PROBANDO BOT√ìN ZOOM
        self.button_zoom_in.place(x=250, y=2)
        self.button_zoom_out.place(x=283, y=2)

        self.boton_arriba.place(x=390, y=2)
        self.boton_abajo.place(x=415, y=2)
        self.boton_izquierda.place(x=445, y=2)
        self.boton_derecha.place(x=474, y=2)
        self.boton_rotar_izquierda.place(x=508, y=2)
        self.boton_rotar_derecha.place(x=538, y=2)
        

        #!!!!!!!!!!!! Probando
        self.h_scrollbar.place(x=canvas_width - 80, y=canvas_height - 23)


        self.label_info_rotar.place(x=8, y=canvas_height - 25)  # Posici√≥n inicial
        self.label_info_limpiar.place(x=label_info_rotar_width + 20, y=canvas_height - 25)

        # self.label_info_zoomInOut.place(x=label_info_rotar_width + info_limpiar_width + 20 + 11, y=canvas_height - 25)  # Posici√≥n inicial
        # self.label_coordenadas.place(x=label_info_rotar_width + info_limpiar_width + 20 + 21, y=canvas_height - 25)

        self.label_punto1.place(x=label_info_rotar_width + info_limpiar_width + 20 + 11, y=canvas_height - 25)

        self.label_punto2.place(x=label_info_rotar_width + info_limpiar_width + label_punto1_width + 20 + 11, y=canvas_height - 25)
        
        
        



        

    def update_values(self):
        """Actualiza los valores de scale y spacing seg√∫n la entrada del usuario."""
        self.scale = float(self.scale1.get())
        self.spacing = float(self.spacing1.get())
        self.linea_de_inicio = float(self.spacing_linea_de_inicio.get())


    def dibujando_puntos(self, frame):
        """Dibuja los puntos seleccionados en el frame."""
        if len(self.points) > 0:
            for x, y in self.points:
                cv2.circle(frame, (x, y), 3, (0, 255, 0), 1)

    def rotar_imagen(self, frame, angulo):
        """Rota la imagen seg√∫n el √°ngulo dado."""
        (h, w) = frame.shape[:2]  # Altura y ancho del frame
        centro = (w // 2, h // 2)  # Centro de la imagen

        M = cv2.getRotationMatrix2D(centro, angulo, 1.0)
        return cv2.warpAffine(frame, M, (w, h))



    def rotar_izquierda(self, event):
        """Rota la imagen 10 grados a la izquierda."""
        self.angulo += 2  # Decrementa el √°ngulo
        print(f"Rotando a la izquierda: {self.angulo} grados")

    def rotar_derecha(self, event):
        """Rota la imagen 10 grados a la derecha."""
        self.angulo -= 2  # Incrementa el √°ngulo
        print(f"Rotando a la derecha: {self.angulo} grados")

    # def mostrar_coordenadas(self, event):
    #     x, y = event.x, event.y
    #     self.label_coordenadas.config(text=f"X, Y: ({x}, {y})")

    def clics(self, event):
        # Verifica si el widget que dispar√≥ el evento no es un Button o Entry o ScrollBar
        if isinstance(event.widget, (tk.Button, tk.Entry, tk.Scrollbar)):
            return  # Si es un bot√≥n o entrada de texto, no hacer nada
        

        # Captura los puntos seleccionados con el mouse y actualiza los labels de los puntos.
        x, y = event.x, event.y
        if len(self.points) < 2:
            self.points.append([x, y])
            if len(self.points) == 1:
                self.setear_p1(x, y)
            elif len(self.points) == 2:
                self.setear_p2(x, y)

    def setear_p1(self, x, y):
        # Actualiza el label del primer punto con las coordenadas seleccionadas.
        self.label_punto1.config(text=f"P1: ({x}, {y})")

    def setear_p2(self, x, y):
        # Actualiza el label del segundo punto con las coordenadas seleccionadas.
        self.label_punto2.config(text=f"P2: ({x}, {y})")





    def zoom_in(self, event=None):
        """Incrementa el factor de zoom."""
        if self.zoom_factor < self.max_zoom:
            self.zoom_factor += self.zoom_step
        print(f"Zoom In: Factor de zoom = {self.zoom_factor}")
        self.label_info_ZOOM.config(text=f"x{self.zoom_factor:.1f}")  # Limpiar el label del punto 1
        

    def zoom_out(self, event=None):
        """Decrementa el factor de zoom."""
        if self.zoom_factor > self.min_zoom:
            self.zoom_factor -= self.zoom_step
        print(f"Zoom Out: Factor de zoom = {self.zoom_factor}")
        self.label_info_ZOOM.config(text=f"x{self.zoom_factor:.1f}")  # Limpiar el label del punto 1


    def toggle_menu(self, event=None):
        # Mostrar u ocultar el men√∫ lateral
        if self.menu_frame.winfo_ismapped():
            self.menu_frame.pack_forget()  # Ocultar el men√∫
        else:
            self.menu_frame.pack(side=tk.BOTTOM, fill=tk.BOTH, expand=True)  # Mostrar el men√∫
            




    # #!!!!! Obtener valores de tama√±os
    # def get_sizes(self):
    #     """Obtiene los tama√±os del root, canvas, y frame y los imprime."""
    #     # Tama√±o del root
    #     root_width = self.master.winfo_width()
    #     root_height = self.master.winfo_height()
    #     print(f"Tama√±o del root: {root_width}x{root_height}")

    #     # Tama√±o del canvas
    #     canvas_width = self.canvas.winfo_width()
    #     canvas_height = self.canvas.winfo_height()
    #     print(f"Tama√±o del canvas: {canvas_width}x{canvas_height}")

    #     # Tama√±o del frame (de la c√°mara)
    #     ret, frame = self.cap.read()
    #     if ret:
    #         frame_height, frame_width = frame.shape[:2]
    #         print(f"Tama√±o del frame: {frame_width}x{frame_height}")
    #     else:
    #         print("No se pudo obtener el frame de la c√°mara.")






    def capturar_frames(self):
        # Este m√©todo se ejecuta en un hilo separado para capturar frames continuamente
        while True:
            if self.cap is not None:

                ret, frame = self.cap.read()
                if ret:
                    self.frame_actual = frame
                else:
                    self.frame_actual = None
            else:
                print("Error: La c√°mara no se inicializ√≥ correctamente.")
                # self.capturando = False
                # break



    def update_frame(self):
        # Actualiza el feed de la c√°mara continuamente.
        # ret, frame = self.cap.read()
        if self.frame_actual is None:
            self.mostrar_pantalla_negra()
            # return 
        else:
            frame = self.frame_actual.copy()

            # Redimensionar el frame aplicando el factor de zoom
            height, width = frame.shape[:2]
            new_width = int(width * self.zoom_factor)
            new_height = int(height * self.zoom_factor)
            frame = cv2.resize(frame, (new_width, new_height))


            frame = self.rotar_imagen(frame, self.angulo)
            self.dibujando_puntos(frame)

            

            # Convertir el frame a formato compatible con tkinter
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            img = Image.fromarray(frame)
            imgtk = ImageTk.PhotoImage(image=img)




            #! Ajustar el tama√±o del canvas y las barras de desplazamiento
            self.canvas.create_image(0, 0, anchor=tk.NW, image=imgtk)
            self.canvas.image = imgtk  # Guardar la referencia


            # Limpiar l√≠neas anteriores en el canvas
            self.canvas.delete("lines")


            # Mensaje si se ha seleccionado un solo punto
            if len(self.points) == 1:
                cv2.putText(frame, f'{self.msg}', (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.75, (0,0,255), 2)
                # print("Puntos: ", self.points)
            


            # Dibuja l√≠neas si se han seleccionado dos puntos
            if len(self.points) == 2:
                self.boton_arriba['state'] = 'normal'
                self.boton_abajo['state'] = 'normal'
                self.boton_izquierda['state'] = 'normal'
                self.boton_derecha['state'] = 'normal'
                self.boton_rotar_izquierda['state'] = 'normal'
                self.boton_rotar_derecha['state'] = 'normal'
                
                p1, p2 = self.points
                pixel_distance = np.linalg.norm(np.array(p2) - np.array(p1))    # Distancia en pixeles entre los dos puntos 
                x_pixel = (self.spacing * pixel_distance) / self.scale          # 3mm convertidos a pixeles
                
                #! LINEA EXTRA...!!
    #           10mm -------- pixel_distance
    #           47mm -------- x_pixel(distance)

                x_pixel_1er_linea = (self.linea_de_inicio * pixel_distance) / self.scale




                #!Probando
                canvas_width = self.canvas.winfo_width()
                canvas_height = self.canvas.winfo_height()
                
                centro_x = canvas_width // 2 + self.desplaz_x
                centro_y = canvas_height // 2 + self.desplazamiento_y
                
                # Coordenadas de las l√≠neas
                primera_linea_start = (0+self.desplaz_x , int(centro_y - (x_pixel // 2) - x_pixel_1er_linea) + self.anguloIzq)
                primera_linea_end = (canvas_width+self.desplaz_x , int(centro_y - (x_pixel // 2) - x_pixel_1er_linea) + self.anguloDer)

                line1_start = (0 + self.desplaz_x, int(centro_y - x_pixel // 2) + self.anguloIzq)
                line1_end = (canvas_width + self.desplaz_x, int(centro_y - x_pixel // 2) + self.anguloDer)
                line2_start = (0 + self.desplaz_x, int(centro_y + x_pixel // 2) + self.anguloIzq)
                line2_end = (canvas_width + self.desplaz_x, int(centro_y + x_pixel // 2) + self.anguloDer)

                centro_vertical_start = (canvas_width // 2, 0)
                centro_vertical_end = (canvas_width // 2, canvas_height + 300)
                centro_horizontal_start = (0, canvas_height // 2)
                centro_horizontal_end = (canvas_width + 300, canvas_height // 2)

            

                # Dibujar l√≠neas en el canvas
                self.canvas.create_line(primera_linea_start, primera_linea_end, fill="red", width=3, tags="lines")

                self.canvas.create_line(line1_start, line1_end, fill="black", width=2, tags="lines")
                self.canvas.create_line(line2_start, line2_end, fill="black", width=2, tags="lines")
                self.canvas.create_line(centro_vertical_start, centro_vertical_end, fill="green", width=1, tags="lines")
                self.canvas.create_line(centro_horizontal_start, centro_horizontal_end, fill="green", width=1, tags="lines")






            # Ajustar el √°rea desplazable del canvas
            self.canvas.config(scrollregion=self.canvas.bbox(tk.ALL))



            # Llamar nuevamente a update_frame
            self.master.after(5, self.update_frame)
            # self.update_frame()

            # self.master.bind("<Motion>", self.mostrar_coordenadas)




    def on_closing(self):
        if self.cap is not None:
            self.cap.release()
        self.master.destroy()




if __name__ == "__main__":
    root = tk.Tk()                  # Creo ventana principal "root"
    app = UmbralApp(root)           # Llamo a la clase "UmbralApp" y todo lo ejecuto dentro de root
    root.mainloop()                 # Ejecuto continuamente root 
    
    
    # Liberar la c√°mara cuando se cierre la ventana
    # app.cap.release()
    cv2.destroyAllWindows()